{"version":3,"sources":["firebase.js","Enroll.js","Assign.js","Hire.js","Remove.js","StudentInfo.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Enroll","props","handleSubmit","e","preventDefault","studentsRef","database","ref","student","name","studentName","current","value","teacher","push","alert","state","React","createRef","Form","onSubmit","this","Group","Label","Control","type","placeholder","Button","Component","Assign","removeStudent","studentID","remove","idName","split","studentRef","teacherName","update","students","map","key","id","teachers","as","Hire","teachersRef","Remove","handleStudentSubmit","handleTeacherSubmit","removeTeacher","teacherID","variant","StudentInfo","Table","responsive","bordered","hover","striped","size","slice","App","on","snapshot","val","newState","setState","Navbar","bg","Brand","inline","FormControl","className","Accordion","Card","Header","Toggle","eventKey","Collapse","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0771023d.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyAafCI7INY2i4lB_jnrjTCZcokU8SjDlLM\",\r\n  authDomain: \"school-dashboard-bc657.firebaseapp.com\",\r\n  databaseURL: \"https://school-dashboard-bc657.firebaseio.com\",\r\n  projectId: \"school-dashboard-bc657\",\r\n  storageBucket: \"school-dashboard-bc657.appspot.com\",\r\n  messagingSenderId: \"1000952375233\",\r\n  appId: \"1:1000952375233:web:ca336e73a73d8ed6057140\",\r\n};\r\nfirebase.initializeApp(config);\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport firebase from \"./firebase.js\";\r\n\r\nclass Enroll extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.studentName = React.createRef();\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const studentsRef = firebase.database().ref(\"students\");\r\n    const student = {\r\n      name: this.studentName.current.value,\r\n      teacher: \"\",\r\n    };\r\n    studentsRef.push(student);\r\n    alert(this.studentName.current.value + \" submitted as new student.\");\r\n    this.studentName.current.value = \"\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Student Name</Form.Label>\r\n            <Form.Control\r\n              ref={this.studentName}\r\n              type=\"text\"\r\n              placeholder=\"e.g. James Smith\"\r\n            />\r\n          </Form.Group>\r\n          <Button type=\"Submit\">Enroll</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Enroll;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport firebase from \"./firebase.js\";\r\n\r\nclass Assign extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.studentName = React.createRef();\r\n    this.teacherName = React.createRef();\r\n  }\r\n\r\n  removeStudent = (studentID) => {\r\n    const studentRef = firebase.database().ref(`/students/${studentID}`);\r\n    studentRef.remove();\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let idName = this.studentName.current.value.split(\",\");\r\n    const studentRef = firebase.database().ref(`/students/${idName[0]}`);\r\n    let student = idName[1];\r\n    let teacher = this.teacherName.current.value;\r\n    studentRef.update({\r\n      name: student,\r\n      teacher: teacher,\r\n    });\r\n    alert(student + \" assigned to \" + teacher);\r\n  };\r\n  render() {\r\n    let students = this.props.students.map(function (student) {\r\n      return (\r\n        <option key={student.id} value={[student.id, student.name]}>\r\n          {student.name}\r\n        </option>\r\n      );\r\n    });\r\n    let teachers = this.props.teachers.map((teacher) => (\r\n      <option key={teacher.id} value={teacher.name}>\r\n        {teacher.name}\r\n      </option>\r\n    ));\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Select student</Form.Label>\r\n            <Form.Control as=\"select\" ref={this.studentName}>\r\n              {students}\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Select teacher to assign student to</Form.Label>\r\n            <Form.Control as=\"select\" ref={this.teacherName}>\r\n              {teachers}\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Button type=\"Submit\">Assign</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Assign;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport firebase from \"./firebase.js\";\r\n\r\nclass Hire extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.teacherName = React.createRef();\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const teachersRef = firebase.database().ref(\"teachers\");\r\n    const teacher = {\r\n      name: this.teacherName.current.value,\r\n    };\r\n    teachersRef.push(teacher);\r\n    alert(this.teacherName.current.value + \" submitted as new teacher.\");\r\n    this.teacherName.current.value = \"\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Teacher Name</Form.Label>\r\n            <Form.Control\r\n              ref={this.teacherName}\r\n              type=\"text\"\r\n              placeholder=\"e.g. Susan Kelly\"\r\n            />\r\n          </Form.Group>\r\n          <Button type=\"Submit\">Submit</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hire;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./firebase.js\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Remove extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.teacherName = React.createRef();\r\n    this.studentName = React.createRef();\r\n  }\r\n\r\n  removeStudent(studentID) {\r\n    const studentRef = firebase.database().ref(`/students/${studentID}`);\r\n    studentRef.remove();\r\n  }\r\n  removeTeacher(teacherID) {\r\n    const teacherRef = firebase.database().ref(`/teachers/${teacherID}`);\r\n    teacherRef.remove();\r\n  }\r\n  handleStudentSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.removeStudent(this.studentName.current.value);\r\n    alert(\"Student has been removed\");\r\n  };\r\n  handleTeacherSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.removeTeacher(this.teacherName.current.value);\r\n    alert(\"Teacher has been removed\");\r\n  };\r\n\r\n  render() {\r\n    let students = this.props.students.map((student) => (\r\n      <option key={student.id} value={student.id}>\r\n        {student.name}\r\n      </option>\r\n    ));\r\n    let teachers = this.props.teachers.map((teacher) => (\r\n      <option key={teacher.id} value={teacher.id}>\r\n        {teacher.name}\r\n      </option>\r\n    ));\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleStudentSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Remove student</Form.Label>\r\n            <Form.Control as=\"select\" ref={this.studentName}>\r\n              {students}\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Button variant=\"danger\" type=\"Submit\">\r\n            Remove\r\n          </Button>\r\n        </Form>\r\n        <Form onSubmit={this.handleTeacherSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Remove teacher</Form.Label>\r\n            <Form.Control as=\"select\" ref={this.teacherName}>\r\n              {teachers}\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Button variant=\"danger\" type=\"Submit\">\r\n            Remove\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Remove;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nconst StudentInfo = ({ students }) => {\r\n  return (\r\n    <Table responsive bordered hover striped size=\"sm\">\r\n      <thead>\r\n        <tr>\r\n          <th>Student Name</th>\r\n          <th>Teacher</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {students.slice(0).map((student) => {\r\n          return (\r\n            <tr key={student.id}>\r\n              <td>{student.name}</td>\r\n              <td>{student.teacher}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StudentInfo;\r\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase.js\";\nimport Enroll from \"./Enroll.js\";\nimport Assign from \"./Assign.js\";\nimport Hire from \"./Hire.js\";\nimport Remove from \"./Remove.js\";\nimport StudentInfo from \"./StudentInfo.js\";\nimport \"./App.css\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      students: [],\n      teachers: [],\n    };\n  }\n\n  componentDidMount() {\n    const studentsRef = firebase.database().ref(\"students\");\n    const teachersRef = firebase.database().ref(\"teachers\");\n    studentsRef.on(\"value\", (snapshot) => {\n      let students = snapshot.val();\n      let newState = [];\n      for (let student in students) {\n        newState.push({\n          id: student,\n          name: students[student].name,\n          teacher: students[student].teacher,\n        });\n      }\n      this.setState({\n        students: newState,\n      });\n    });\n    teachersRef.on(\"value\", (snapshot) => {\n      let teachers = snapshot.val();\n      let newState = [];\n      for (let teacher in teachers) {\n        newState.push({\n          id: teacher,\n          name: teachers[teacher].name,\n        });\n      }\n      this.setState({\n        teachers: newState,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>Thomas Jefferson ES Dashboard</Navbar.Brand>\n          <Form inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Username\"\n              className=\"mr-sm-2\"\n            />\n            <FormControl\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"mr-sm-2\"\n            />\n            <Button variant=\"primary\">Log in</Button>\n          </Form>\n        </Navbar>\n        <Accordion>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"outline\" eventKey=\"0\">\n                Enroll Student\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                <Enroll />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"outline\" eventKey=\"1\">\n                Add New Teacher\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <Hire />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"outline\" eventKey=\"2\">\n                Assign Student to Teacher\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"2\">\n              <Card.Body>\n                <Assign\n                  students={this.state.students}\n                  teachers={this.state.teachers}\n                />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"outline\" eventKey=\"3\">\n                Remove Student or Teacher\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"3\">\n              <Card.Body>\n                <Remove\n                  students={this.state.students}\n                  teachers={this.state.teachers}\n                />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"outline\" eventKey=\"4\">\n                Student Information\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"4\">\n              <Card.Body>\n                <StudentInfo students={this.state.students} />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}